name: Auto compile

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.github/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - '.github/**'
  workflow_dispatch:
    inputs:
      ssh:
        description: "Enable SSH debug session"
        required: false
        default: "false"

env:
  TZ: Asia/Shanghai
  packages: ${{ github.repository }}

jobs:
  job_auto_compile:
    runs-on: ubuntu-latest
    name: test build (${{ matrix.platform }})
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: x86_64
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/x86/64/openwrt-sdk-24.10.3-x86-64_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: aarch64_cortex-a53
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/qualcommax/ipq807x/openwrt-sdk-24.10.3-qualcommax-ipq807x_gcc-13.3.0_musl.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

          - platform: arm_cortex-a7_neon-vfpv4
            url_sdk: https://downloads.openwrt.org/releases/24.10.3/targets/ipq40xx/generic/openwrt-sdk-24.10.3-ipq40xx-generic_gcc-13.3.0_musl_eabi.Linux-x86_64.tar.zst
            sdk_ver: "24.10"

    steps:
    - name: Checkout code
      uses: actions/checkout@main
      with:
        fetch-depth: 0

    - name: Setup variables
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "BASE_SHA=$(git merge-base refs/remotes/origin/${{ github.base_ref }} ${{ github.event.pull_request.head.sha }})" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
          echo "MODE=changed" >> $GITHUB_ENV
        elif [ "${{ github.event_name }}" == "push" ]; then
          echo "BASE_SHA=${{ github.event.before }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.after }}" >> $GITHUB_ENV
          echo "MODE=changed" >> $GITHUB_ENV
        else
          echo "MODE=all" >> $GITHUB_ENV
        fi

    - name: Detect changed directories
      if: env.MODE == 'changed'
      id: detect-changes
      run: |
        CHANGED_DIRS=$(git diff --name-only $BASE_SHA $HEAD_SHA | awk -F'/' '{print $1}' | sort -u | tr '\n' ',')
        CHANGED_DIRS=${CHANGED_DIRS%,}
        echo "CHANGED_DIRS=$CHANGED_DIRS" >> $GITHUB_ENV
        echo "Changed dirs: $CHANGED_DIRS"

    - name: Init ${{ matrix.platform }} compile environment
      run: |
        sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /usr/local/lib/android
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-dev gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev \
            libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses-dev libpython3-dev \
            libreadline-dev libssl-dev libtool libyaml-dev libz-dev lld llvm lrzsz mkisofs msmtp nano \
            ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip python3-ply python3-docutils \
            python3-pyelftools qemu-utils re2c rsync scons squashfs-tools subversion swig texinfo uglifyjs \
            upx-ucl unzip vim wget xmlto xxd zlib1g-dev zstd
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Cache SDK tarball
      uses: actions/cache@v4
      with:
        path: openwrt-sdk-${{ matrix.platform }}.tar.zst
        key: ${{ runner.os }}-sdk-${{ matrix.platform }}-${{ matrix.sdk_ver }}

    - name: Download SDK
      run: |
        file_name=openwrt-sdk-${{ matrix.platform }}.tar.zst
        if [ ! -f "$file_name" ]; then
          wget -O $file_name ${{ matrix.url_sdk }}
        fi
        mkdir sdk && tar --zstd -x -f $file_name -C ./sdk --strip-components=1

    - name: Cache OpenWrt downloads
      uses: actions/cache@v4
      with:
        path: sdk/dl
        key: ${{ runner.os }}-openwrt-dl-${{ matrix.platform }}-${{ matrix.sdk_ver }}
        restore-keys: ${{ runner.os }}-openwrt-dl-${{ matrix.platform }}-
          
    - name: SSH connection to Actions
      uses: mxschmitt/action-tmate@v3.13
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')

    - name: Configure feeds and apply patches
      run: |
        cd sdk
        cat > feeds.conf.default << EOF
        src-git passwall_packages https://github.com/${{ env.packages }}.git;main
        src-git base https://github.com/openwrt/openwrt.git;openwrt-${{ matrix.sdk_ver }}
        src-git packages https://github.com/openwrt/packages.git;openwrt-${{ matrix.sdk_ver }}
        src-git luci https://github.com/openwrt/luci.git;openwrt-${{ matrix.sdk_ver }}
        src-git routing https://github.com/openwrt/routing.git;openwrt-${{ matrix.sdk_ver }}
        src-git telephony https://github.com/openwrt/telephony.git;openwrt-${{ matrix.sdk_ver }}
        EOF

        ./scripts/feeds update -a
        ./scripts/feeds install -a

        # Patches: refresh golang/rust from a known commit and fix Rust host build
        rm -rf temp_resp
        git clone -b master --single-branch https://github.com/openwrt/packages.git temp_resp
        cd temp_resp
        git checkout 2b99cd7d7637da0f152da378994f699aaf0dd44d
        cd ..
        rm -rf feeds/packages/lang/golang && cp -r temp_resp/lang/golang feeds/packages/lang
        rm -rf feeds/packages/lang/rust && cp -r temp_resp/lang/rust feeds/packages/lang
        rm -rf temp_resp

        sed -i 's/--set=llvm\.download-ci-llvm=false/--set=llvm.download-ci-llvm=true/' feeds/packages/lang/rust/Makefile
        grep -q -- '--ci false \\' feeds/packages/lang/rust/Makefile || sed -i '/x\.py \\/a \        --ci false \\' feeds/packages/lang/rust/Makefile

    - name: Generate minimal .config
      run: |
        cd sdk
        echo "CONFIG_ALL_NONSHARED=n" > .config
        echo "CONFIG_ALL_KMODS=n" >> .config
        echo "CONFIG_ALL=n" >> .config
        echo "CONFIG_AUTOREMOVE=n" >> .config
        echo "CONFIG_SIGNED_PACKAGES=n" >> .config

    - name: Select packages into .config (changed mode)
      if: env.MODE == 'changed'
      run: |
        cd sdk
        if [ -z "$CHANGED_DIRS" ]; then
          echo "No changes detected; skipping selection."
        else
          IFS=',' read -ra DIRS <<< "$CHANGED_DIRS"
          for DIR in "${DIRS[@]}"; do
            MF="package/feeds/passwall_packages/$DIR/Makefile"
            if [ -f "$MF" ]; then
              PKG_NAME=$(awk -F ':=' '/^PKG_NAME:=/{print $2}' "$MF" | head -n1)
              [ -z "$PKG_NAME" ] && PKG_NAME="$DIR"
              echo "CONFIG_PACKAGE_${PKG_NAME}=m" >> .config
              echo "Selected package: $PKG_NAME"
            else
              echo "Warning: $DIR has no Makefile under passwall_packages"
            fi
          done
        fi
        make defconfig

    - name: Select packages into .config (all mode with exclusions)
      if: env.MODE == 'all'
      run: |
        cd sdk
        EXCLUDES="dns2socks ip2socks microsocks shadow-tls shadowsocks-libev trojan-plus xray-plugin"
        mapfile -t PKG_DIRS < <(find package/feeds/passwall_packages -maxdepth 2 -type f -name Makefile -print | sed 's#/Makefile##')
        for D in "${PKG_DIRS[@]}"; do
          MF="$D/Makefile"
          [ -f "$MF" ] || continue
          PKG_NAME=$(awk -F ':=' '/^PKG_NAME:=/{print $2}' "$MF" | head -n1)
          [ -z "$PKG_NAME" ] && PKG_NAME=$(basename "$D")
          SKIP=0
          for E in $EXCLUDES; do
            if [ "$PKG_NAME" = "$E" ]; then SKIP=1; break; fi
          done
          [ $SKIP -eq 1 ] && { echo "Excluded: $PKG_NAME"; continue; }
          echo "CONFIG_PACKAGE_${PKG_NAME}=m" >> .config
          echo "Selected (all-mode): $PKG_NAME"
        done
        make defconfig

    - name: Build packages
      run: |
        cd sdk
        if [ "${MODE}" = "changed" ] && [ -n "$CHANGED_DIRS" ]; then
          IFS=',' read -ra DIRS <<< "$CHANGED_DIRS"
          for DIR in "${DIRS[@]}"; do
            echo "Compiling DIR: $DIR"
            make package/$DIR/compile -j$(nproc) V=s
          done
        else
          mapfile -t SELECTED < <(grep -E '^CONFIG_PACKAGE_' .config | sed 's/^CONFIG_PACKAGE_//;s/=m$//;s/=y$//')
          for PKG in "${SELECTED[@]}"; do
            echo "Compiling PKG: $PKG"
            make package/$PKG/compile -j$(nproc) V=s || true
          done
        fi

    - name: Collect and compress ipks
      run: |
        mkdir -p "$GITHUB_WORKSPACE/output"
        cd sdk/bin/packages
        tar -czf "$GITHUB_WORKSPACE/output/ipks-${{ matrix.platform }}.tar.gz" */passwall_packages/*.ipk
        ls -l "$GITHUB_WORKSPACE/output/ipks-${{ matrix.platform }}.tar.gz" || true

    - name: Get latest release tag
      id: get_release
      run: |
        TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
        echo "LATEST_TAG=$TAG" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload compressed ipks to Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.LATEST_TAG }}
        files: output/ipks-${{ matrix.platform }}.tar.gz
        append: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
